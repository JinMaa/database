<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <!-- Visualization libraries -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <style>
        #network-container {
            height: 600px;
            border: 1px solid #ddd;
            background-color: #f8f9fa;
        }
        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 30px;
        }
        .query-section {
            max-height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">Neo4j Alkanes Explorer</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="bi bi-house"></i> Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/callstack"><i class="bi bi-diagram-3"></i> Call Stack</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard"><i class="bi bi-speedometer2"></i> Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/analytics"><i class="bi bi-graph-up"></i> Analytics</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row mb-4">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/analytics">Analytics</a></li>
                        <li class="breadcrumb-item active"><%= title %></li>
                    </ol>
                </nav>

                <h1><i class="bi bi-graph-up"></i> <%= title %></h1>
            </div>
        </div>

        <!-- Visualization Section -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Visualization</h5>
                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#queryDetails">
                                <i class="bi bi-code"></i> Show Query
                            </button>
                        </div>
                    </div>
                    <div class="collapse" id="queryDetails">
                        <div class="card-body query-section">
                            <pre><code><%= query %></code></pre>
                        </div>
                    </div>
                    <div class="card-body">
                        <% if (visualizationType === 'network') { %>
                            <!-- Network Graph Visualization -->
                            <div id="network-container"></div>
                        <% } else if (visualizationType === 'bar') { %>
                            <!-- Bar Chart Visualization -->
                            <div class="chart-container">
                                <canvas id="barChart"></canvas>
                            </div>
                        <% } else if (visualizationType === 'pie') { %>
                            <!-- Pie Chart Visualization -->
                            <div class="chart-container">
                                <canvas id="pieChart"></canvas>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Raw Data Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Data Table</h5>
                        <small class="text-muted">Records: <%= records.length %></small>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="resultsTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <% if (records.length > 0) { %>
                                            <% Object.keys(records[0].toObject()).forEach(header => { %>
                                                <th><%= header %></th>
                                            <% }); %>
                                        <% } %>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% records.forEach(record => { %>
                                        <tr>
                                            <% Object.values(record.toObject()).forEach(value => { %>
                                                <td>
                                                    <% if (value === null) { %>
                                                        <span class="text-muted">null</span>
                                                    <% } else if (typeof value === 'object') { %>
                                                        <pre class="json-data"><%= JSON.stringify(value, null, 2) %></pre>
                                                    <% } else { %>
                                                        <%= value %>
                                                    <% } %>
                                                </td>
                                            <% }); %>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap5.min.js"></script>
    
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            $('#resultsTable').DataTable({
                pageLength: 25,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                order: []
            });
            
            // Parse records to JavaScript objects
            const records = <%- JSON.stringify(records.map(r => r.toObject())) %>;
            const visualizationType = '<%= visualizationType %>';
            
            // Visualization logic based on type
            if (visualizationType === 'network') {
                renderNetworkGraph(records);
            } else if (visualizationType === 'bar') {
                renderBarChart(records);
            } else if (visualizationType === 'pie') {
                renderPieChart(records);
            }
        });
        
        // Network Graph Visualization
        function renderNetworkGraph(records) {
            // Check if we have the required fields for a network graph
            const firstRecord = records.length > 0 ? records[0] : null;
            
            // Debug node fields
            console.log("Available fields:", firstRecord ? Object.keys(firstRecord) : []);
            
            // First check for standard lowercase source/target
            // Then check for Neo4j-style Source/Target (capitalized)
            // Then check any other case variations that might be coming from Neo4j
            if (firstRecord && 
                ((firstRecord.source !== undefined && firstRecord.target !== undefined) ||
                 (firstRecord.Source !== undefined && firstRecord.Target !== undefined) ||
                 (firstRecord.SOURCE !== undefined && firstRecord.TARGET !== undefined))) {
                
                const nodes = new Set();
                const edges = [];
                
                // Extract unique nodes and create edges
                records.forEach(record => {
                    // Handle different case possibilities for source/target fields
                    const source = record.source || record.Source || record.SOURCE;
                    const target = record.target || record.Target || record.TARGET;
                    const edgeWeight = record.edge_weight || record.edgeWeight || 1;
                    const transferCount = record.transfer_count || record.transferCount || 0;
                    const totalValue = record.total_value || record.totalValue || 0;
                    
                    if (source) nodes.add(source);
                    if (target) nodes.add(target);
                    
                    if (source && target) {
                        edges.push({
                            from: source,
                            to: target,
                            value: edgeWeight || 1,
                            title: `${transferCount || ''} transfers, ${totalValue || 0} total value`,
                            arrows: 'to'
                        });
                    }
                });
                
                // Create dataset for visualization
                const nodesArray = Array.from(nodes).map(id => ({
                    id,
                    label: id.substring(0, 8) + '...',
                    title: id,
                    shape: 'dot',
                    size: 10
                }));
                
                // Create network
                const container = document.getElementById('network-container');
                const data = {
                    nodes: new vis.DataSet(nodesArray),
                    edges: new vis.DataSet(edges)
                };
                const options = {
                    nodes: {
                        font: {
                            size: 12
                        }
                    },
                    edges: {
                        width: function(edge) {
                            return edge.value;
                        },
                        color: {
                            color: '#2B7CE9',
                            highlight: '#FFA500'
                        }
                    },
                    physics: {
                        forceAtlas2Based: {
                            gravitationalConstant: -26,
                            centralGravity: 0.005,
                            springLength: 230,
                            springConstant: 0.18
                        },
                        maxVelocity: 146,
                        solver: 'forceAtlas2Based',
                        timestep: 0.35,
                        stabilization: {
                            enabled: true,
                            iterations: 1000
                        }
                    }
                };
                const network = new vis.Network(container, data, options);
            } else {
                document.getElementById('network-container').innerHTML = 
                    '<div class="alert alert-warning">Network visualization requires source and target fields in the data.</div>';
            }
        }
        
        // Bar Chart Visualization
        function renderBarChart(records) {
            if (records.length === 0) return;
            
            const canvas = document.getElementById('barChart');
            
            // Determine key fields for the visualization
            const keys = Object.keys(records[0]);
            let labelField, valueField;
            
            // Common patterns for labels and values
            const labelCandidates = ['id', 'alkane_id', 'creator', 'chain_pattern', 'source'];
            const valueCandidates = ['total_activity', 'total_creations', 'frequency', 'alkanes_created', 'transfer_count'];
            
            // Find appropriate fields
            for (const candidate of labelCandidates) {
                if (keys.includes(candidate)) {
                    labelField = candidate;
                    break;
                }
            }
            
            for (const candidate of valueCandidates) {
                if (keys.includes(candidate)) {
                    valueField = candidate;
                    break;
                }
            }
            
            // If no specific fields found, use first string field as label and first number field as value
            if (!labelField || !valueField) {
                for (const key of keys) {
                    const sampleValue = records[0][key];
                    if (!labelField && (typeof sampleValue === 'string')) {
                        labelField = key;
                    } else if (!valueField && (typeof sampleValue === 'number')) {
                        valueField = key;
                    }
                    
                    if (labelField && valueField) break;
                }
            }
            
            if (!labelField || !valueField) {
                canvas.parentNode.innerHTML = 
                    '<div class="alert alert-warning">Could not determine appropriate fields for bar chart.</div>';
                return;
            }
            
            // Limit to top 20 records for readability
            const data = records.slice(0, 20);
            
            // Create chart
            new Chart(canvas, {
                type: 'bar',
                data: {
                    labels: data.map(r => {
                        // Truncate long labels
                        const label = r[labelField]?.toString() || '';
                        return label.length > 15 ? label.substring(0, 15) + '...' : label;
                    }),
                    datasets: [{
                        label: valueField,
                        data: data.map(r => r[valueField]),
                        backgroundColor: 'rgba(54, 162, 235, 0.7)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: data.length > 10 ? 'y' : 'x', // Horizontal bar if many items
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: function(tooltipItems) {
                                    return data[tooltipItems[0].dataIndex][labelField];
                                }
                            }
                        },
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        title: {
                            display: true,
                            text: `Top ${data.length} records by ${valueField}`
                        }
                    }
                }
            });
        }
        
        // Pie Chart Visualization
        function renderPieChart(records) {
            if (records.length === 0) return;
            
            const canvas = document.getElementById('pieChart');
            
            // Determine key fields for the visualization
            const keys = Object.keys(records[0]);
            let labelField, valueField;
            
            // Common patterns for labels and values in pie charts
            const labelCandidates = ['event_type', 'type', 'category'];
            const valueCandidates = ['count', 'frequency', 'total'];
            
            // Find appropriate fields
            for (const candidate of labelCandidates) {
                if (keys.includes(candidate)) {
                    labelField = candidate;
                    break;
                }
            }
            
            for (const candidate of valueCandidates) {
                if (keys.includes(candidate)) {
                    valueField = candidate;
                    break;
                }
            }
            
            // If no specific fields found, use first string field as label and first number field as value
            if (!labelField || !valueField) {
                for (const key of keys) {
                    const sampleValue = records[0][key];
                    if (!labelField && (typeof sampleValue === 'string')) {
                        labelField = key;
                    } else if (!valueField && (typeof sampleValue === 'number')) {
                        valueField = key;
                    }
                    
                    if (labelField && valueField) break;
                }
            }
            
            if (!labelField || !valueField) {
                canvas.parentNode.innerHTML = 
                    '<div class="alert alert-warning">Could not determine appropriate fields for pie chart.</div>';
                return;
            }
            
            // Limit to top 10 records for readability in a pie chart
            const data = records.slice(0, 10);
            
            // Generate colors
            const backgroundColors = [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)',
                'rgba(255, 159, 64, 0.7)',
                'rgba(199, 199, 199, 0.7)',
                'rgba(83, 102, 255, 0.7)',
                'rgba(40, 159, 64, 0.7)',
                'rgba(210, 199, 199, 0.7)'
            ];
            
            // Create chart
            new Chart(canvas, {
                type: 'pie',
                data: {
                    labels: data.map(r => r[labelField]),
                    datasets: [{
                        data: data.map(r => r[valueField]),
                        backgroundColor: backgroundColors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        },
                        title: {
                            display: true,
                            text: `Distribution by ${labelField}`
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw;
                                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round(value / total * 100);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>
